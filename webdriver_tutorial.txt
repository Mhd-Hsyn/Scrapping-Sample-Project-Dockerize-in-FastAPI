beautifulsoup4==4.12.3
bs4==0.0.2
requests==2.31.0
selenium==4.1.0
webdriver-manager==4.0.1
fake-useragent==1.4.0


from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager

driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)


___________________

from bs4 import BeautifulSoup
import pandas as pd
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from fake_useragent import UserAgent

def get_random_headers():
    ua = UserAgent()
    headers = {"User-Agent": ua.random, "Accept-Language": "en-US, en;q=0.5"}
    return headers


def get_chromedrvier_options():
    headers = get_random_headers()
    print(headers)
    # Set Chrome options
    options = Options()
    options.headless = True
    options.add_argument("--enable-logging")
    options.add_argument("--log-level=0")
    # options.add_argument('user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3')
    options.add_argument(f'user-agent={headers["User-Agent"]}')
    options.add_argument("--no-sandbox")
    return options

options= get_chromedrvier_options()
driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)





______________________________________________________________

##################    PYVIRTUAL DISPLAY    ############################

from bs4 import BeautifulSoup
import pandas as pd
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from fake_useragent import UserAgent

from pyvirtualdisplay import Display   # virtual display


def get_random_headers():
    ua = UserAgent()
    headers = {"User-Agent": ua.random, "Accept-Language": "en-US, en;q=0.5"}
    return headers


def get_chromedrvier_options():
    headers = get_random_headers()
    print(headers)
    # Set Chrome options
    options = Options()
    # options.headless = True
    options.add_argument("--enable-logging")
    options.add_argument("--log-level=0")
    # options.add_argument('user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3')
    options.add_argument(f'user-agent={headers["User-Agent"]}')
    options.add_argument("--no-sandbox")

    ###########  THIS NEED  *****   headless= False   *******    USE VIRTUAL DISPLAY

    options.add_argument('--timeout=500') # for loading page

    return options



def sysInit(options, address):

    display = Display(visible=0, size=(800, 600))
    display.start()
    try:
        driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)
        driver.maximize_window()

        driver.get("https://propertyinformationportal.nyc.gov/")

    finally:
        display.stop()
        if driver:
            driver.quit()




#######################   ERROR    ##########################  Ubuntu 24.04


raise child_exception_type(errno_num, err_msg, err_filename)
OSError: [Errno 8] Exec format error: '/home/admin12/.wdm/drivers/chromedriver/linux64/129.0.6668.89/chromedriver-linux64/THIRD_PARTY_NOTICES.chromedriver'


Step 1:  command

    rm -rf ~/.wdm

Description:- The command rm -rf ~/.wdm is a Unix/Linux command that deletes the entire .wdm directory located in your home directory. This directory is created by the webdriver-manager package and typically contains cached WebDriver binaries (like ChromeDriver, GeckoDriver, etc.) that webdriver-manager downloads for you.

Step 2:

upgrade webdriver-manager   

from      webdriver-manager==4.0.1         To      webdriver-manager==4.0.2


Step 3:   Code 

from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service

service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=options)
driver.get("https://www.google.com")
